<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Leetcode - 标签 - Jimi’s Blog</title>
        <link>http://localhost:1313/tags/leetcode/</link>
        <description>Leetcode - 标签 - Jimi’s Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>2114272829@qq.com (jimi)</managingEditor>
            <webMaster>2114272829@qq.com (jimi)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sun, 11 Feb 2024 00:00:00 &#43;0000</lastBuildDate><atom:link href="http://localhost:1313/tags/leetcode/" rel="self" type="application/rss+xml" /><item>
    <title>动态规划</title>
    <link>http://localhost:1313/dynamic_programming/</link>
    <pubDate>Sun, 11 Feb 2024 00:00:00 &#43;0000</pubDate>
    <author>Jimi</author>
    <guid>http://localhost:1313/dynamic_programming/</guid>
    <description><![CDATA[0-1 背包问题]]></description>
</item>
<item>
    <title>对称二叉树</title>
    <link>http://localhost:1313/erchashu_duicheng/</link>
    <pubDate>Sun, 11 Feb 2024 00:00:00 &#43;0000</pubDate>
    <author>Jimi</author>
    <guid>http://localhost:1313/erchashu_duicheng/</guid>
    <description><![CDATA[对称二叉树 对称二叉树 方法一：递归 在计算当前二叉树的最大深度时，可以先递归计算出其左子树和右子树的最大深度，然后在 O(1) 时间内计算出当前二叉树的最]]></description>
</item>
<item>
    <title>二叉树的直径</title>
    <link>http://localhost:1313/erchashu_zhijing/</link>
    <pubDate>Sun, 11 Feb 2024 00:00:00 &#43;0000</pubDate>
    <author>Jimi</author>
    <guid>http://localhost:1313/erchashu_zhijing/</guid>
    <description><![CDATA[二叉树的直径 二叉树的直径 方法一：递归 在计算当前二叉树的最大深度时，可以先递归计算出其左子树和右子树的最大深度，然后在 O(1) 时间内计算出当前二叉树]]></description>
</item>
<item>
    <title>二叉树的中序遍历</title>
    <link>http://localhost:1313/erchashu_zhongxu/</link>
    <pubDate>Sun, 11 Feb 2024 00:00:00 &#43;0000</pubDate>
    <author>Jimi</author>
    <guid>http://localhost:1313/erchashu_zhongxu/</guid>
    <description><![CDATA[二叉树的中序遍历 二叉树的中序遍历 方法一：递归 定义 inorder(root) 表示当前遍历到 root 节点的答案，那么按照定义，我们只要递归调用 inorder(root.left) 来遍历 root 节点的左子树，然后将 root]]></description>
</item>
<item>
    <title>二叉树的最大深度</title>
    <link>http://localhost:1313/erchashu_zuidashendu/</link>
    <pubDate>Sun, 11 Feb 2024 00:00:00 &#43;0000</pubDate>
    <author>Jimi</author>
    <guid>http://localhost:1313/erchashu_zuidashendu/</guid>
    <description><![CDATA[二叉树的最大深度 二叉树的最大深度 方法一：深度优先搜索 在计算当前二叉树的最大深度时，可以先递归计算出其左子树和右子树的最大深度，然后在 O(1) 时间内]]></description>
</item>
<item>
    <title>翻转二叉树</title>
    <link>http://localhost:1313/erchashu_fanzhuan/</link>
    <pubDate>Sun, 11 Feb 2024 00:00:00 &#43;0000</pubDate>
    <author>Jimi</author>
    <guid>http://localhost:1313/erchashu_fanzhuan/</guid>
    <description><![CDATA[翻转二叉树 翻转二叉树 方法一：递归 在计算当前二叉树的最大深度时，可以先递归计算出其左子树和右子树的最大深度，然后在 O(1) 时间内计算出当前二叉树的最]]></description>
</item>
<item>
    <title>环形链表</title>
    <link>http://localhost:1313/lianbiao_huanxing/</link>
    <pubDate>Sun, 11 Feb 2024 00:00:00 &#43;0000</pubDate>
    <author>Jimi</author>
    <guid>http://localhost:1313/lianbiao_huanxing/</guid>
    <description><![CDATA[环形链表 环形链表 方法一：哈希表 使用哈希表来存储所有已经访问过的节点。每次我们到达一个节点，如果该节点已经存在于哈希表中，则说明该链表是环形链]]></description>
</item>
<item>
    <title>链表的中间结点</title>
    <link>http://localhost:1313/lianbiao_zhongjian/</link>
    <pubDate>Sun, 11 Feb 2024 00:00:00 &#43;0000</pubDate>
    <author>Jimi</author>
    <guid>http://localhost:1313/lianbiao_zhongjian/</guid>
    <description><![CDATA[链表的中间结点 链表的中间结点 方法一：快慢指针 用两个指针 slow 与 fast 一起遍历链表。slow 一次走一步，fast 一次走两步。那么当 fast 到达链表的末尾时，]]></description>
</item>
<item>
    <title>链表反转</title>
    <link>http://localhost:1313/lianbiao_fanzhuan/</link>
    <pubDate>Sun, 11 Feb 2024 00:00:00 &#43;0000</pubDate>
    <author>Jimi</author>
    <guid>http://localhost:1313/lianbiao_fanzhuan/</guid>
    <description><![CDATA[链表反转 链表反转 方法一：迭代 在遍历链表时，将当前节点的 next 指针改为指向前一个节点。由于节点没有引用其前一个节点，因此必须事先存储其前一个节点。]]></description>
</item>
<item>
    <title>两两交换链表中的节点</title>
    <link>http://localhost:1313/lianbiao_liangliangfanzhuan/</link>
    <pubDate>Sun, 11 Feb 2024 00:00:00 &#43;0000</pubDate>
    <author>Jimi</author>
    <guid>http://localhost:1313/lianbiao_liangliangfanzhuan/</guid>
    <description><![CDATA[两两交换链表中的节点 两两交换链表中的节点 方法一：迭代 创建哑结点 dummyHead，令 dummyHead.next = head。令 temp 表示当前到达的节点，初始时 temp = dumm]]></description>
</item>
</channel>
</rss>
